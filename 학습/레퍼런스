

BeautifulSoup
    뷰티플 수프 만들기
        잡탕 = BeautifulSoup( HTML 코드, "html.parser" )
            HTML 코드를 이용해서 최초의 수프를 끓임
        HTML 코드 = URL객체.소스보기()
            아무 문자열 넣어도 됨
            URL 객체를 그대로 넣어도 됨
        "html.parser" …… 기본 분석 장치. 코드를 정돈하고 보정해 줌.
            라이브러리 등 설치 필요 'lxml'     ……  HTML 문법 오류 교정
            라이브러리 등 설치 필요 'htmllib'  ……  HTML 문법 오류 교정
    
    부분 수프의 추출
        뷰티플수프 (잡탕) 에서, 원하는 국물과 건더기를 건져내면서 부분 수프를 만든다
            추출의 결과물도 수프이다 (return 수프 객체)
        부분 수프를 만드는 함수 : tag, find
            잡탕.태그명              …… <태그>로 </구획>된 영역
            잡탕.find(규칙)         …… 규칙을 만족하는 영역
        부분 수프를 변수에 저장
            야채국 = 잡탕.find(야채)
            고기국 = 잡탕.find(고기)
            
    부분 수프는 뷰티플수프와 동일한 성질을 가지고 있다
        같은 종류의 객체는 같은 기능과 처우를 갖는다
            수프는 공통적으로 Tag 라는 이름의 객체이다
            (.태그명)으로 추출했다는 말이 아니고 이름이, Tag 라는 종류의 객체이다
        부분 수프는 뷰티플 수프의 기능을 갖는다
            닭계장 = BeautifulSoup( HTML 코드, "html.parser" )
            국그릇 = 닭계장.find(국)   # '국그릇'은 닭계장의 부분 수프
            앞접시 = 국그릇.find(건더기) # '국그릇'도 find 함수를 사용한다
        부분 수프는 스스로의 부분 수프를 갖는다 (부분수프=자손)
            젓가락 = 앞접시.find(고기)
            숟가락 = 앞접시.find(후룩)
        연쇄적 표현
            그릇(변수)을 거치지않고 고기를 직접 골라먹을 수도 있다
            젓가락 = 닭계장.find(국).find(건더기).find(고기)

    뷰티플 수프 라이브러리에는 5가지의 객체가 있다
        뷰티플수프 (BeautifulSoup)
        수프 집합 (ResultSet)
        부분 수프 (Tag)
        태그가 두르는 문자열 (NavigableString)
        주석 부분 (Comment)

    부분 수프는 공통적으로 Tag 라는 종류의 객체이다
            태그로 추출했다는 말이 아니고, Tag 라는 자료형의 객체이다
            어쨌든 <>~</>로 이루어져 있는탓에 그것의 외연상 정체성도 태그가 돼버렸다... 정도

    Tag 객체의 작동 기능 (메소드)
        리턴값이 Tag
            HTML 문서의 위에서부터 하나만 추출하는 메소드 
            Tag.<태그명>
                페이지 제목 = 수프.html.head.title
            Tag.find ("태그명", {"속성1":"값", "속성2":"값"}, text="텍스트")
                정규표현식도 넣을 수 있음 re.complie
                태그명 -- 지정한 태그로 시작할 것
                속성값 -- 태그가 지정한 속성 중에 하나라도 가지며, 값은 일치할 것
                텍스트 -- 어떠한 텍스트를 두르는 태그일 것
            Tag.find (속성="값")
                지정한 속성이 지정한 값을 가지는 태그를 추출
            Tag.child
                자식 단계의 태그를 추출
            Tag.next_sibling
                같은 단계의 태그를 추출
            Tag.parents
                부모 단계의 태그를 추출
            
        리턴값이 리스트
            Tag.findAll ("태그명", {"속성1":"값", "속성2":"값"}, text="텍스트")
                find와 같으나, 조건을 만족하는 모든 구역을 전부 추출
            Tag.children
                Tag의 트리구조에서 자식 단계의 태그들을 모두 추출
            Tag.next_siblings
                Tag의 트리구조에서 같은 단계의 태그들을 모두 추출
            attrs
                속성을 가졍옴
                
        
    ResultSet (=리스트)의 메소드
        .text : <태그>가 감싸고있는 텍스트만 반환 …… <b>굵음 태그가 둘러싸고 있는데 무시하고 이 문장만 추출</b>
    

예기치 못한 상황
    웹은 엉망진창
        ㅡ데이터 형식이 제대로 지켜지지 않음
        ㅡ웹사이트는 자주 다운 됨
        ㅡ닫는 </태그> 빠트려져 있음
        ㅡ고려하지 못한 스스로의 탓        
        
    페이지 문제
        ㅡ페이지를 찾을 수 없음 ( '서버의' 페이지를 찾을 수 없음 )
        ㅡURL 해석 에러
        ㅡ서버를 찾을 수 없음        
        
    *페이지 문제
        try:                        # try 문 전체가 종료되면 아무 일도 없는 듯이 그 이후를 실행
            
            html = urlopen("문제의 url")
            # 실행시킬경우 에러를 일으킬 경우에 이 구역을 "없던" 셈치고 해당 except를 실행.
            # 실행시킬경우 에러를 일으키지 않을 것이면 그냥 평범한 코드와 같이 실행. (else 문과 finally 문을 실행)
        
        except URLError:            # 서버를 찾지 못하는 에러

        except HTTPError:           
            # 서버에서 받아오지 못하는 에러
            # 404 Page Not Found - 서버는 찾았는데 해당되는 파일이 서버한테 없을 때
            # 500 Internal Server Error - 서버는 찾았는데 클라이언트와 데이터를 주고받지 못할 때

        else:                       # 아무런 에러도 발생하지 않았을 경우 실행.
        finally:                    # try 문이 끝날 때 필수적으로 실행.
        
    None 문제
        내용이 없는 형식적인 객체 : None
            무형의 토큰, 의미있는 더미로 쓰일 수 있다
    
        때떄로 무언가의 결과값은 None 이다 
            ㅡ (bs.없는태그)는 None 을 반환
        
        None 이 되어버릴 객체를 가지고 평상시의 공정을 적용할 때 에러가 발생한다    
            BeautifulSoup(None,"html.parser")
                원래대로라면 평범한 객체가 유입되어야 하는데 None 이 유입
            
            bs.None.태그2.태그3
                (bs.태그1)이 None 을 반환하는 경우, None 의 하위 요소를 묻게되어 에러가 발생
                
        의도적으로 None 을 리턴하거나 갖게하므로써 특별한 상황들을 일괄적으로 다룰 수 있다
        
        def IsErr:
            try:
                오류가 일어날 수 있는 코드1
            except:
                return None
                
            try:
                오류가 일어날 수 있는 코드2
            except:
                return None
            
            ...
            


페이지
    추출이 용이한 페이지
        페이지 인쇄
        모바일 버전 사이트
        고립적이며 타게팅이 용이한 페이지
    스크립트 분석
    