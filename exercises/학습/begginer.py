# 모듈.변수
# 모듈.함수 --- 모듈에 내장된 장치를 사용
#
# 모듈은 이미 만들어진 소스 코드 파일이다
# 모듈은 그래서 함수와 변수를 가진다
# 
# 함수와 변수를 정의하면 바로 사용할 수 있는 것처럼
# 모듈을 import 하면 장치를 바로 사용할 수 있다
#
# module2.action
#  --> (다른 무엇이 아닌) module2 에 귀속된 action 을 실행
#
# module4.action
#  --> (다른 무엇이 아닌) module4 에 귀속된 action 을 실행


# 인스턴스.변수(=필드)
# 인스턴스.함수(=메소드) --- 객체에 내장된 기능을 사용
#
# 클래스(DNA) 에 영혼을 불어넣으면, 비로소 인스턴스라는 객체가 생성된다
# 클래스(DNA) 에 정의된 대로 객체는 함수와 변수를 가진다
#
# 클래스를 import 해도 내장된 기능을 바로 사용할 수 없고
# 인스턴스를 생성하면 비로소 기능을 사용할 수 있다
#
# instance.action
#  --> instance 라는 객체가 포함하는 action 이라는 기능을 사용
#
#
# 마침표의 의의는,
#  (쓰고자 하는 action) 이기도 하고
#  (구체적인 action) 이기도 하다


# 클래스(DNA) 는 생물 종의 유전 정보이며, 그 자체로는 아무 짓도 하지 못한다
# 인스턴스(개체)로 태어나야만 비로소 역할을 수행할 수 있다
#
# Chicken.run          --> error
#
# boolsazo = Chicken() --> 불사조라는 '닭'이 비로소 생성됨
# boolsazo.run         --> 닭이라는 관념은 '달릴' 수 없지만, 불사조라는 '닭'은 달릴 수 있다


# DNA를 물려받은 이상,
# 나에게는 나도 모르는 나의 능력이 내장되어 있으며 발동시킬 수 있다
#
# boolsazo.fly
#  --> 닭이어버린 이상 불사조는 날 수 있다


# 같은 종의 개체(=인스턴스) 사이에는 염색체 구성(=멤버)이 동일하다
# 같은 함수와 변수를 갖으며, 동일한 이방인의 피연산자가 된다
#
# 세 마리의 닭을 생성하였다
#   anivia = Chicken()
#   boolsazo = Chicken()
#   ttochi = Chicken()
#
#
# 세 마리의 닭은 같은 기능 범주 (=함수)(=메소드) 을 갖는다
#
#   anivia.feed(고기, 곡식)    --> 곡식
#   anivia.cry                 --> 꼬끼오
#   anivia.fly                 --> 성공
#
#   boolsazo.feed(고기, 곡식)  --> 곡식
#   boolsazo.cry               --> 꼬끼오
#   boolsazo.fly               --> 성공
#
#   ttochi.feed(고기, 곡식)    --> 곡식
#   ttochi.cry                 --> 꼬끼오
#   ttochi.fly                 --> 성공
#
#
#
# 세 마리의 닭은 같은 속성 범주 (=변수)(=필드) 를 갖는다
#
#
#
#
#
# 세 마리의 닭은 같은 처리를 가할 수 있다
# 처리의 정의에 따라서 개별 닭의 성질을 이용할 수 있다
#
#   fry(anivia)    --> "치킨" 객체가 된다
#   fry(boolsazo)
#   fry(ttochi)
#
#
#

# 같은 종의 개체(=인스턴스) 사이에는 염색체 구성(=멤버)이 동일하다
# 같은 종의 개체들도 개성을 가지고 있다
# 공통된 메소드를 부여받지만, 
#
# 객체는 생성되면서 생성자(=탄생)라는 과정을 거친다
#
# 생성자에 가변적인 요인(랜덤, 외부입력)이 있다면 개성있는 객체가 된다
# 가변적인 요인을 제외하면 완전히 동일하다
#
# 세 마리의 닭을 생성하였다
#   anivia = Chicken(120)
#   boolsazo = Chicken(160)
#   ttochi = Chicken()
#
# 외부입력은 가변적인 요인이다 (염색체 조작)
#   anivia.testIQ    == 120
#   boolsazo.testIQ  == 160
#   ttochi.testIQ    == 108, 생성자에 입력을 받지 않았으므로 랜덤으로 부여되었다
#
# 랜덤은 가변적인 요인이다
#   anivia.gender    == 여
#   boolsazo.gender  == 남
#   ttochi.gender    == 여
#
# 함수는 공통적인 요인이다
#
# 종족은 공통적인 요인이다
#   type(anivia)     == 닭
#   type(boolsazo)   == 닭
#   type(ttochi)     == 닭



# 각각의 개체는 살아가면서 서로다른 형질을 후천적으로 획득한다
#
# 



#  [변수, 함수, 클래스] (=장치)
#    ∈ 모듈 (=파일)
#     ∈ 패키지 (=폴더)(=디렉토리)
#
#
#
#                import 변수      -->  변수를 가져옴
#                import 함수      -->  함수를 가져옴
#                import 클래스    -->  클래스를 가져옴
#                import (=장치)   -->  이미 선언/정의된 장치를 복붙
#
#                import 모듈      -->  포함된 모든 장치를 가져옴
#                import (=파일)   -->  파일을 가져옴 (by 코드를 복붙)
#
#                import 패키지    -->  포함된 모든 모듈을 가져옴
#                import (=폴더)   -->  폴더를 가져옴 (by 코드를 복붙)
#
#
# from 패키지    import 모듈      -->  패키지에서 모듈을 가져옴
#     (=폴더)        (=파일)
#
#
# from 모듈      import 변수      -->  모듈에서 변수를 가져옴
# from 모듈      import 함수      -->  모듈에서 함수를 가져옴
# from 모듈      import 클래스    -->  모듈에서 클래스를 가져옴
# from 모듈      import (=장치)   -->  구체적으로 지목된 모듈에서 장치를 가져옴
