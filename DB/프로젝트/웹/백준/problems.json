[
	{
	  "id": "1",
	  "duplicateProblem": false,
	  "tier": 1,
	  "solution": "두 수의 합",
	  "summary": "두 수를 더해 특정 값이 되는 쌍을 찾습니다.",
	  "tags": []
	},
	{
	  "id": "2",
	  "duplicateProblem": false,
	  "tier": 3,
	  "solution": "문자 뒤집기",
	  "summary": "주어진 문자열을 반대로 뒤집습니다.",
	  "tags": ["문자열"]
	},
	{
	  "id": "3",
	  "duplicateProblem": false,
	  "tier": 2,
	  "solution": "중복 제거",
	  "summary": "배열에서 중복된 값을 제거합니다.",
	  "tags": ["배열", "정렬"]
	},
	{
	  "id": "4",
	  "duplicateProblem": false,
	  "tier": 5,
	  "solution": "계단 오르기",
	  "summary": "계단을 오르는 경우의 수를 계산합니다.",
	  "tags": ["동적 프로그래밍"]
	},
	{
	  "id": "5",
	  "duplicateProblem": true,
	  "tier": 4,
	  "solution": "팩토리얼 계산",
	  "summary": "n!을 재귀로 계산합니다.",
	  "tags": ["재귀"]
	},
	{
	  "id": "6",
	  "duplicateProblem": false,
	  "tier": 6,
	  "solution": "소수 판별",
	  "summary": "주어진 수가 소수인지 확인합니다.",
	  "tags": ["수학"]
	},
	{
	  "id": "7",
	  "duplicateProblem": false,
	  "tier": 8,
	  "solution": "구간 합",
	  "summary": "부분 구간의 합을 빠르게 계산합니다.",
	  "tags": ["누적합", "배열"]
	},
	{
	  "id": "8",
	  "duplicateProblem": false,
	  "tier": 10,
	  "solution": "괄호 검사",
	  "summary": "괄호의 짝이 맞는지 확인합니다.",
	  "tags": ["스택"]
	},
	{
	  "id": "9",
	  "duplicateProblem": false,
	  "tier": 7,
	  "solution": "그래프 탐색",
	  "summary": "DFS, BFS로 그래프를 탐색합니다.",
	  "tags": ["그래프", "BFS", "DFS"]
	},
	{
	  "id": "10",
	  "duplicateProblem": false,
	  "tier": 9,
	  "solution": "최단 거리",
	  "summary": "Dijkstra 알고리즘을 사용해 최단 거리를 구합니다.",
	  "tags": ["그래프", "다익스트라"]
	},
	{
	  "id": "11",
	  "duplicateProblem": false,
	  "tier": 12,
	  "solution": "이진 탐색",
	  "summary": "정렬된 배열에서 이진 탐색을 수행합니다.",
	  "tags": ["이진탐색"]
	},
	{
	  "id": "12",
	  "duplicateProblem": false,
	  "tier": 15,
	  "solution": "최대 힙",
	  "summary": "최대 힙을 구현합니다.",
	  "tags": ["우선순위큐", "힙"]
	},
	{
	  "id": "13",
	  "duplicateProblem": false,
	  "tier": 13,
	  "solution": "이중 연결 리스트",
	  "summary": "이중 연결 리스트를 구현합니다.",
	  "tags": ["자료구조", "연결리스트"]
	},
	{
	  "id": "14",
	  "duplicateProblem": false,
	  "tier": 16,
	  "solution": "조합의 수",
	  "summary": "nCk를 효율적으로 계산합니다.",
	  "tags": ["수학", "조합"]
	},
	{
	  "id": "15",
	  "duplicateProblem": false,
	  "tier": 14,
	  "solution": "문자열 압축",
	  "summary": "연속된 문자를 압축합니다.",
	  "tags": ["문자열"]
	},
	{
	  "id": "16",
	  "duplicateProblem": false,
	  "tier": 11,
	  "solution": "최대 부분합",
	  "summary": "연속된 부분 배열의 최대 합을 찾습니다.",
	  "tags": ["배열", "DP"]
	},
	{
	  "id": "17",
	  "duplicateProblem": false,
	  "tier": 17,
	  "solution": "미로 탐색",
	  "summary": "2차원 배열을 BFS로 탐색합니다.",
	  "tags": ["그래프", "BFS"]
	},
	{
	  "id": "18",
	  "duplicateProblem": false,
	  "tier": 18,
	  "solution": "트리 순회",
	  "summary": "이진 트리를 전위/중위/후위 순회합니다.",
	  "tags": ["트리"]
	},
	{
	  "id": "19",
	  "duplicateProblem": false,
	  "tier": 19,
	  "solution": "동전 교환",
	  "summary": "동전을 최소 개수로 교환합니다.",
	  "tags": ["DP", "그리디"]
	},
	{
	  "id": "20",
	  "duplicateProblem": false,
	  "tier": 20,
	  "solution": "배낭 문제",
	  "summary": "0-1 Knapsack 문제를 풉니다.",
	  "tags": ["DP"]
	},
	{
	  "id": "21",
	  "duplicateProblem": false,
	  "tier": 6,
	  "solution": "회문 검사",
	  "summary": "문자열이 회문인지 판별합니다.",
	  "tags": ["문자열"]
	},
	{
	  "id": "22",
	  "duplicateProblem": false,
	  "tier": 8,
	  "solution": "문자열 정렬",
	  "summary": "문자열을 사전순으로 정렬합니다.",
	  "tags": ["문자열", "정렬"]
	},
	{
	  "id": "23",
	  "duplicateProblem": false,
	  "tier": 4,
	  "solution": "피보나치 수",
	  "summary": "피보나치 수열을 구합니다.",
	  "tags": ["재귀", "DP"]
	},
	{
	  "id": "24",
	  "duplicateProblem": false,
	  "tier": 2,
	  "solution": "짝수 홀수 판별",
	  "summary": "정수가 짝수인지 판별합니다.",
	  "tags": ["기초"]
	},
	{
	  "id": "25",
	  "duplicateProblem": false,
	  "tier": 5,
	  "solution": "문자 개수 세기",
	  "summary": "문자열에서 특정 문자의 개수를 셉니다.",
	  "tags": ["문자열"]
	},
	{
	  "id": "26",
	  "duplicateProblem": false,
	  "tier": 7,
	  "solution": "좌표 정렬",
	  "summary": "2차원 좌표를 정렬합니다.",
	  "tags": ["정렬"]
	},
	{
	  "id": "27",
	  "duplicateProblem": false,
	  "tier": 10,
	  "solution": "해시맵 구현",
	  "summary": "기초적인 해시맵을 구현합니다.",
	  "tags": ["해시"]
	},
	{
	  "id": "28",
	  "duplicateProblem": false,
	  "tier": 3,
	  "solution": "홀수 위치 문자 추출",
	  "summary": "홀수 번째 문자를 출력합니다.",
	  "tags": ["문자열"]
	},
	{
	  "id": "29",
	  "duplicateProblem": false,
	  "tier": 9,
	  "solution": "문자열 비교",
	  "summary": "두 문자열이 같은지 비교합니다.",
	  "tags": ["문자열"]
	},
	{
	  "id": "30",
	  "duplicateProblem": false,
	  "tier": 1,
	  "solution": "기본 출력",
	  "summary": "Hello, World!를 출력합니다.",
	  "tags": []
	}
  ]
  