______________________________ = lambda: print()
###### 열혈 파이썬 몰랐던 것만 정리

# 간단한 Swap 방법
x, y = 121, 797
print(x,y)

x, y = y, x
print(x,y)

# eval 함수가 실행할 코드에는 문자열을 감싸는 "따옴표"가 포함되지 않으므로,
# eval에 입력한 문자열이 숫자로만 이루어져 있다면,
# 실제 코드는 <숫자>가 아닌 <수> 가 됨.
# 드물게 형변환 용도로 쓰기도 함.
______________________________()
a = eval("  2025  ")		# int 자료형  2025
b = eval("  '2025'  ")		# str 자료형 '2025'
print( a, type(a)	)
print( b, type(b)	)


# 음수 인덱스 부터, 마지막(원소) 까지 슬라이스
def 축약(id):
	return "..." + str(id)[-4:]


# 더하기 문법으로 리스트를 불리면, append/extend와 달리 새로운 객체가 됨
______________________________()
a = [1, 2, 3]
print(f'{축약( id(a) )} >>  a = {a} 의 주소')
a.append( 4 )		#a.append( [4, 5] ) 안됨
a.append( 5 )		#a.append( 4, 5 ) 안됨

print(f'{축약( id(a) )} >>  a = {a} 의 주소')
a.extend([6, 7])	#a.extend( 6, 7 ) 안됨
a.extend([8])		#a.extend( 8 ) 안됨
a.extend([[9]]) 	#[껍질] 하나 벗겨서 넣음

print(f'{축약( id(a) )} >>  a = {a} 의 주소')

______________________________()
b = [1, 2, 3]
print(f'{축약( id(b) )} >>  b = {b} 의 주소')
b = [1, 2, 3] + [4, 5]
print(f'{축약( id(b) )} >>  b = {b} 의 주소')


# 곱하기 문법으로 리스트를 불리면, 같은 참조가 반복해서 나열됨
______________________________()
a = ['파', '이', '썬'] * 2

print(a)
for i in range(6):
	print(f'{a[i]} 주소 >>  {축약( id(a[i]) )}') # 0,4 번째 원소는 같은 주소의 객체
	# 같은 주소의(id) 객체:  (0,3번째) (1,4번째) (2,5번째)



# 함수 내 변수와 전역 변수의 이름이 같으면,
# 전역 변수는 가려지고, 동일한 이름의 새로운 지역 변수가 생성됨.
# global 키워드를 사용하면 전역 변수를 그대로 참조하고 수정할 수 있음
______________________________()
cnt = 100
def func1():
	cnt = 0
func1()
print(cnt)	# 결과값 100

def func2():
	global cnt
	cnt = 0
func2()
print(cnt)	# 결과값 0
